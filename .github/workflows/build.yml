name: Build

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libusb-1.0-0-dev
          
      - name: Prepare environment
        run: |
          echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
          
      - name: Fetch libplist
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          name: libplist-latest_${{env.target_triplet}}
          repo: libimobiledevice/libplist

      - name: Fetch libimobiledevice-glue
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          name: libimobiledevice-glue-latest_${{env.target_triplet}}
          repo: libimobiledevice/libimobiledevice-glue

      - name: Install external dependencies
        run: |
          mkdir extract
          for I in *.tar; do
              tar -C extract -xvf $I
          done

          sudo cp -r extract/* /
          sudo ldconfig

      - name: Run autogen
        run: ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LDFLAGS="-Wl,-rpath=/usr/local/lib"

      - name: Run make
        run: make -j$(nproc)

      - name: Run make install
        run: sudo make install

      - name: Prepare artifact
        run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -cf libirecovery.tar lib usr
          echo -n "$(git rev-parse HEAD | tr -d '\n')" > latest_build_sha.txt
          echo -n "$(git rev-list --count HEAD | tr -d '\n')" > latest_build_num.txt

      - name: Upload versioning
        uses: actions/upload-artifact@v3
        with:
          name: Versioning
          path: |
            ${{ github.workspace }}/latest_build_sha.txt
            ${{ github.workspace }}/latest_build_num.txt

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: libirecovery_Linux
          path: libirecovery.tar

  build-macos:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          if test -x "`which port`"; then
              sudo port install libtool autoconf automake pkgconfig
          else
              brew install libtool autoconf automake pkgconfig
          fi
        shell: bash

      - name: Fetch libplist
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          name: libplist-latest_macOS
          repo: libimobiledevice/libplist

      - name: Fetch libimobiledevice-glue
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          name: libimobiledevice-glue-latest_macOS
          repo: libimobiledevice/libimobiledevice-glue

      - name: Install external dependencies
        run: |
          mkdir extract
          for I in *.tar; do
              tar -C extract -xvf $I
          done
          sudo cp -r extract/* /

      - name: Run autogen
        run: |
          SDKDIR=`xcrun --sdk macosx --show-sdk-path`
          TESTARCHS="arm64 x86_64"
          USEARCHS=
          for ARCH in $TESTARCHS; do
              if echo "int main(int argc, char **argv) { return 0; }" |clang -arch $ARCH -o /dev/null -isysroot $SDKDIR -x c - 2>/dev/null; then
                  USEARCHS="$USEARCHS -arch $ARCH"
              fi
          done
          export CFLAGS="$USEARCHS -isysroot $SDKDIR"
          echo "Using CFLAGS: $CFLAGS"
          ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

      - name: Run make
        run: make -j$(sysctl -n hw.ncpu)

      - name: Run make install
        run: sudo make install

      - name: Prepare artifact
        run: |
          mkdir -p dest
          DESTDIR=`pwd`/dest make install
          tar -C dest -cf libirecovery.tar usr
          echo -n "$(git rev-parse HEAD | tr -d '\n')" > latest_build_sha.txt
          echo -n "$(git rev-list --count HEAD | tr -d '\n')" > latest_build_num.txt

      - name: Upload versioning
        uses: actions/upload-artifact@v3
        with:
          name: Versioning
          path: |
            ${{ github.workspace }}/latest_build_sha.txt
            ${{ github.workspace }}/latest_build_num.txt

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: libirecovery_Darwin
          path: libirecovery.tar

  build-linux-static:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libusb-1.0-0-dev
          
      - name: Prepare environment
        run: |
          echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
          
      #- name: Fetch libplist
      #  uses: dawidd6/action-download-artifact@v2
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    workflow: build.yml
      #    name: libplist-latest_${{env.target_triplet}}
      #    repo: libimobiledevice/libplist
      
      - name: Checkout libplist
        uses: actions/checkout@v3
        with:
          repository: libimobiledevice/libplist
          path: ${{ github.workspace }}/libplist
      
      - name: Install libplist
        run: |
          cd ${{ github.workspace }}/libplist
          ./autogen.sh --disable-shared --without-cython
          make -j$(nproc)
          sudo make install
          cd -

      #- name: Fetch libimobiledevice-glue
      #  uses: dawidd6/action-download-artifact@v2
      #  with:
      #    github_token: ${{secrets.GITHUB_TOKEN}}
      #    workflow: build.yml
      #    name: libimobiledevice-glue-latest_${{env.target_triplet}}
      #    repo: libimobiledevice/libimobiledevice-glue

      - name: Checkout libimobiledevice-glue
        uses: actions/checkout@v3
        with:
          repository: libimobiledevice/libimobiledevice-glue
          path: ${{ github.workspace }}/libimobiledevice-glue
      
      - name: Install libimobiledevice-glue
        run: |
          cd ${{ github.workspace }}/libimobiledevice-glue
          ./autogen.sh --disable-shared
          make -j$(nproc)
          sudo make install
          cd -

      #- name: Install external dependencies
      #  run: |
      #    mkdir extract
      #    for I in *.tar; do
      #        tar -C extract -xvf $I
      #    done
      #
      #    sudo cp -r extract/* /
      #    sudo ldconfig

      - name: Run autogen
        run: ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LDFLAGS="-Wl,-rpath=/usr/local/lib" --disable-shared --enable-static

      - name: Run make
        run: make -j$(nproc)

      - name: Run make install
        run: sudo make install

      - name: Prepare artifact
        run: |
          echo -n "$(git rev-parse HEAD | tr -d '\n')" > latest_build_sha.txt
          echo -n "$(git rev-list --count HEAD | tr -d '\n')" > latest_build_num.txt

      - name: Upload versioning
        uses: actions/upload-artifact@v3
        with:
          name: Versioning
          path: |
            ${{ github.workspace }}/latest_build_sha.txt
            ${{ github.workspace }}/latest_build_num.txt

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: libirecovery-static_Linux
          path: /usr/local/bin/irecovery

  build-macos-static:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          if test -x "`which port`"; then
              sudo port install libtool autoconf automake pkgconfig
          else
              brew install libtool autoconf automake pkgconfig
          fi
        shell: bash

      #- name: Fetch libplist
      #  uses: dawidd6/action-download-artifact@v2
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    workflow: build.yml
      #    name: libplist-latest_${{env.target_triplet}}
      #    repo: libimobiledevice/libplist
      
      - name: Checkout libplist
        uses: actions/checkout@v3
        with:
          repository: libimobiledevice/libplist
          path: ${{ github.workspace }}/libplist
      
      - name: Install libplist
        run: |
          cd ${{ github.workspace }}/libplist

          SDKDIR=`xcrun --sdk macosx --show-sdk-path`
          TESTARCHS="arm64 x86_64"
          USEARCHS=
          for ARCH in $TESTARCHS; do
            if echo "int main(int argc, char **argv) { return 0; }" |clang -arch $ARCH -o /dev/null -isysroot $SDKDIR -x c - 2>/dev/null; then
              USEARCHS="$USEARCHS -arch $ARCH"
            fi
          done
          export CFLAGS="$USEARCHS -isysroot $SDKDIR"
          echo "Using CFLAGS: $CFLAGS"
          PYTHON3_BIN=`xcrun -f python3`
          if test -x $PYTHON3_BIN; then
            export PYTHON=$PYTHON3_BIN
            PYTHON_VER=`$PYTHON3_BIN -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('VERSION'))"`
            PYTHON_EXEC_PREFIX=`$PYTHON3_BIN -c "import distutils.sysconfig; print(distutils.sysconfig.get_config_var('exec_prefix'))"`
            PYTHON_LIBS_PATH=$PYTHON_EXEC_PREFIX/lib
            PYTHON_FRAMEWORK_PATH=$PYTHON_EXEC_PREFIX/Python3
            export PYTHON_LIBS="-L$PYTHON_LIBS_PATH -lpython$PYTHON_VER"
            export PYTHON_EXTRA_LDFLAGS="-Wl,-stack_size,1000000  -framework CoreFoundation $PYTHON_FRAMEWORK_PATH"
          else
            export PATH="$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin"
            export LIBS="-L/Library/Frameworks/Python.framework/Versions/2.7/lib"
            export PYTHON_EXTRA_LDFLAGS="-u _PyMac_Error /System/Library/Frameworks/Python.framework/Versions/2.7/Python"
          fi
          ./autogen.sh --disable-shared --without-cython --enable-debug

          make -j$(sysctl -n hw.ncpu)
          sudo make install
          cd -

      #- name: Fetch libimobiledevice-glue
      #  uses: dawidd6/action-download-artifact@v2
      #  with:
      #    github_token: ${{secrets.GITHUB_TOKEN}}
      #    workflow: build.yml
      #    name: libimobiledevice-glue-latest_${{env.target_triplet}}
      #    repo: libimobiledevice/libimobiledevice-glue

      - name: Checkout libimobiledevice-glue
        uses: actions/checkout@v3
        with:
          repository: libimobiledevice/libimobiledevice-glue
          path: ${{ github.workspace }}/libimobiledevice-glue
      
      - name: Install libimobiledevice-glue
        run: |
          cd ${{ github.workspace }}/libimobiledevice-glue

          SDKDIR=`xcrun --sdk macosx --show-sdk-path`
          TESTARCHS="arm64 x86_64"
          USEARCHS=
          for ARCH in $TESTARCHS; do
            if echo "int main(int argc, char **argv) { return 0; }" |clang -arch $ARCH -o /dev/null -isysroot $SDKDIR -x c - 2>/dev/null; then
              USEARCHS="$USEARCHS -arch $ARCH"
            fi
          done
          export CFLAGS="$USEARCHS -isysroot $SDKDIR"
          echo "Using CFLAGS: $CFLAGS"
          ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig --disable-shared

          make -j$(sysctl -n hw.ncpu)
          sudo make install
          cd -

      #- name: Install external dependencies
      #  run: |
      #    mkdir extract
      #    for I in *.tar; do
      #        tar -C extract -xvf $I
      #    done
      #
      #    sudo cp -r extract/* /
      #    sudo ldconfig

      - name: Run autogen
        run: |
          SDKDIR=`xcrun --sdk macosx --show-sdk-path`
          TESTARCHS="arm64 x86_64"
          USEARCHS=
          for ARCH in $TESTARCHS; do
              if echo "int main(int argc, char **argv) { return 0; }" |clang -arch $ARCH -o /dev/null -isysroot $SDKDIR -x c - 2>/dev/null; then
                  USEARCHS="$USEARCHS -arch $ARCH"
              fi
          done
          export CFLAGS="$USEARCHS -isysroot $SDKDIR -fPIC"
          echo "Using CFLAGS: $CFLAGS"
          ./autogen.sh PKG_CONFIG_PATH=/usr/local/lib/pkgconfig --disable-shared --enable-static

      - name: Run make
        run: make -j$(sysctl -n hw.ncpu)

      - name: Run make install
        run: sudo make install 

      - name: Prepare artifact
        run: |
          echo -n "$(git rev-parse HEAD | tr -d '\n')" > latest_build_sha.txt
          echo -n "$(git rev-list --count HEAD | tr -d '\n')" > latest_build_num.txt

      - name: Upload versioning
        uses: actions/upload-artifact@v3
        with:
          name: Versioning
          path: |
            ${{ github.workspace }}/latest_build_sha.txt
            ${{ github.workspace }}/latest_build_num.txt

      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: libirecovery-static_Darwin
          path: /usr/local/bin/irecovery
